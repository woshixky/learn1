时间任务
时间任务是什么？什么地方需要使用时间任务？
按照规定时间让系统自动执行规定的事情。我们可以利用时间任务，让系统帮我们在规定的时间段执行我们想要做的事情，这样我们就可以不必一直守着计算机！

如何使用时间任务呢？
时间任务分为三种：
1.atd   
2.crond   
3.anacrond（此服务rhel6没有，整合到了crond里)


1.atd服务，一次性时间任务（只能定时在某一分钟的0秒，无法定时在某一秒上，如果要想定时在秒上，可以使用shell脚本来实现）
# ps -ef | grep atd 		--查看at服务是否开启
# service atd start		--启动atd服务
# chkconfig atd on  		--做开机自启动
如果报未能识别的服务，说明没有安装：
# yum install -y at


atd服务使用格式：

# at 14:14 102016		--在2016年10月20日的14点14分执行一个任务
at> echo "haha">/dev/pts/1
at> <EOT>		--输入完成后按下 ctrl+d 结束
job 1 at 2016-09-23 14:14	--job 1表示一个时间任务编号，这里是指系统的第一次at任务，所以为1，后面是定时任务执行的时间

at时间任务命令选项：

-l	列出at任务  可直接使用# atq
-d	删除at任务  可直接使用# atrm [时间任务标号]
-c	查看任务内容
-f 	后面加<文件> 从指定文件读取任务

如：
# at -l		--列出当前系统中未执行的at时间任务 （或 # atq）
3	2014-07-24 15:25 a root
4	2014-07-25 14:25 a root
6	2015-07-24 14:25 a root
# at -d  3  	--删除at时间任务中编号为3的时间任务（或 # atrm 3）
# atq		--删除后在查看一次还未执行的at时间任务
4	2014-07-25 14:25 a root
6	2015-07-24 14:25 a root


如果你要做的事步骤比较多，则先写成脚本，然后使用at进行调用（-f 选项实例）
at -f xxx.sh


# vim /tmp/1.sh 
#!/bin/bash
echo 1 > /dev/pts/1
echo 2 > /dev/pts/1
echo 3 > /dev/pts/1


# at now + 1 minutes -f /tmp/1.sh 	--当前时间+1分钟后执行/tmp/1.sh  	
job 2 at 2014-07-24 14:26		
# at now + 1 hours -f /tmp/1.sh 	--当前时间+1小时后执行/tmp/1.sh  
job 3 at 2014-07-24 15:25
# at now + 1 days -f /tmp/1.sh  	--当前时间+1天后执行/tmp/1.sh  
job 4 at 2014-07-25 14:25
# at now + 1 months -f /tmp/1.sh  	--当前时间+1个月后执行/tmp/1.sh  
job 5 at 2014-08-24 14:25
# at now + 1 years -f /tmp/1.sh  	--当前时间+1年后执行/tmp/1.sh  
job 6 at 2015-07-24 14:25

at时间人物中的时间可以使用AM、PM表示
AM（上午时间）
PM（下午时间）
如：
# at 6.45 am May 12		--五月12日的上午6点45分执行
# at 11.10 pm		--下午11点10分执行
# at 9am tomorrow		--明天上午9点执行
# at 15:00 May 24		--五月24日15点整执行

还有更多命令格式，请自行查阅at时间任务手册： # man at

# ls  /var/spool/at/	 --这个目录会看到有三个可执行文件， cat去看与at -c 任务号看到的结果一样

/etc/at.allow		--此文件默认不存在，但可以手动创建，at任务白名单
/etc/at.deny		--at任务黑名单
这两个文件控制哪些普通用户可以使用at服务


at时间任务扩展指令“batch”

batch为，at命令的特殊版本，在执行的任务会占用大量资源的时候用，只在cpu需求低于cpu能力80%的时候使用
# batch
at> echo "hi" > /dev/tty2
一样使用 ctrl+d 结束

batch创建的任务也是通过atq查看，atrm删除 

--------------------------------我是一条华丽的分割线-------------------------------------------

2.crond 周期性执行时间任务
作用：
如果我们想要在每一天的某一个时间段让系统自动完成我们想要完成的任务时即可使用！
使用方法：
直接在该服务的配置文件中进行修改即可
配置文件路径： /etc/crontab


# /etc/init.d/crond start (service crond start)	--启动服务
# chkconfig crond on			--开机启动服务


# vim /etc/crontab		--下面四行是rhel5里的配置，rhel6里看不到了，但还是在生效	

	SHELL=/bin/bash				指定系统要使用哪个shell
	PATH=/sbin:/bin:/usr/sbin:/usr/bin		指定系统执行命令的路径
	MAILTO=root				执行信息将通过电子邮件发送给root用户
	HOME=/					指定在执行命令或者脚本时使用的主目录				

	# For details see man 4 crontabs
	  分 时 日 月 周
	# Example of job definition:
	# .---------------- minute (0 - 59)	 	 				分
	# |  .------------- hour (0 - 23)							时
	# |  |  .---------- day of month (1 - 31)						日
	# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...					月
	# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat		周
	# |  |  |  |  |
	# *  *  *  *  *   user-name command to be executed
	   * *  * * *      这里写上在规定时间内需要执行的命令或者脚本


*代表每分，每小时，每天。。。。。。
,代表分隔的时间，如1,3,7 	1小时3小时7小时
-代表连续的时间，如2-10	2到10小时
*/2 代表每2分		每2小时	

例如：

例1：
# vim /etc/crontab
# Example of job definition:
# .---------------- minute (0 - 59)	 	 				
# |  .------------- hour (0 - 23)							
# |  |  .---------- day of month (1 - 31)						
# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...					
# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat		
# |  |  |  |  |
# *  *  *  *  *    user-name   command to be executed
   * *  *  * * 	root echo heihei > /dev/pts/5
  时间	         使用的用户名	     需要执行的任务

表示每一分钟使用root用户执行一次 echo heihei > /dev/pts/5 命令
		
例3：
# vim /etc/crontab
* * * * * root run-parts /etc/cron.minutely
表示每一分钟都去/tmp目录下将可执行的脚本都执行一次

# mkdir /tmp/1.sh
# vim /tmp/1.sh		--脚本需要x执行权限，否则系统将无法自动执行# chmod 755 /tmp/*
#!/bin/bash

echo haha > /dev/pts/5


crontab命令

crontab命令使用格式：
# crontab [-u user] 选项

命令常用选项：
-u 用户名。
-e 编辑crontab文件。
-l 列出crontab文件中的内容。
-r 删除crontab文件。

创建一个crontab文件
# touch /tmp/cronfile				--手动创建该文件
# echo "* * * * * echo 1 > /dev/pts/2" >> /tmp/cronfile	--想新建好的crontab文件追加内容
# crontab /tmp/cronfile				--启用新建的crontab文件

列出crontab文件
# crontab -l

编辑crontab文件
# crontab -e			--每个用户都可以这样创建自己的时间任务
01 21 * * * /sbin/init 0		--因为用什么用户操作就是什么用户的身份，所以这里不用写用户身份
# crontab -u user1  -e   		--编辑user1用户的时间任务
你不使用crontab -e,直接去修改下面的目录里的对应的用户名的文件也是一样
/var/spool/cron/

删除crontab文件
# crontab -r

crontab使用者权限文件
文件：/etc/cron.deny
说明：该文件中所列用户不允许使用crontab命令（黑名单）

文件：/etc/cron.allow
说明：该文件中所列用户允许使用crontab命令（白名单）

文件：/var/spool/cron/
说明：所有用户crontab文件存放的目录,以用户名命名
如：/var/spool/cron/user1	user1这个文件就是user1这个用户的crontab文件


----------------------------------我是一条华丽的分割线-------------------------------------------------------


ssh等效性
原理：产生一对密钥，自己持有一个私钥，公钥给对方，需要一对才能解密
用途：
使用ssh远程连接时不用在使用密码！


# ssh-keygen 					--输入这个命令后，三次回车产生空密码key对
Generating public/private rsa key pair.
Enter file in which to save the key (/home/oracle/.ssh/id_rsa): 	--保存密钥的位置
Enter passphrase (empty for no passphrase):				--密钥密码
Enter same passphrase again:						--重复密码

# ls /root/.ssh/
authorized_keys  id_rsa(私钥,相当于钥匙)           
id_rsa.pub(公钥,相当于锁)       
known_hosts（存放过去连接过你这台主机的ip）

# scp /root/.ssh/id_rsa.pub 10.0.0.20:/root/.ssh/authorized_keys	--把公钥传给20的机器后，重命令名为authorized_keys

# ssh-add /root/.ssh/id_rsa   		--在rhel6如果不能成功可能需要在本地把自己的私钥加一下



ssh 10.0.0.20			--直接ssh不需要密码了
ssh-keygen -t dsa		--可以这样使用dsa的加密方式
ssh-keygen -t rsa		--默认的加密方式


思考：
试想一下，如果你管理1000台服务器，你希望就在一台服务器上能轻松远程管理所有服务器，或者在一台上写脚本可以管理所有服务器，你会怎么做？  

答案：
如果你都做ssh等效性，工作量太大；就算是都做好了，也不安全，如果一台被攻破，那么另外999台也没有安全保障了
但并不是说这个没有应用，在少量的几台之间做一些特殊应用还是可以用的；在oracle的RAC集群里，各个节点之间必须要配置这个(只不过是oracle用户，不是root用户)
管理1000台不使用ssh等效性，要实现管理的话，可以使用expect自动应答脚本

或者使用用户集中化管理，所有的用户都在一个服务器上




















