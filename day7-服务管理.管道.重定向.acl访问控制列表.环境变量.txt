服务管理
手动启动、停止和重启服务命令：
第一种：
# service 服务名称 start	启动服务
# service 服务名称 stop	停止服务
# service 服务名称 restart	重启服务

第二种：

# /etc/init.d/服务名称  start	启动服务
# /etc/init.d/服务名称  stop	停止服务
# /etc/init.d/服务名称  restart	重启服务

/etc/init.d/和/etc/rc.d/init.d 目录下存放的都是服务启动脚本

# cat  /etc/init.d/httpd	
5 # chkconfig: - 85 15	
	-   代表在2、3、4、5级别下会启动，如果要自定义在某个级别启动的话在这里可以用数字表示，例如：23
	85 代表在启动时的顺序为85
	15 代表在关闭的时候顺序为15

chkconfig 命令	服务管理命令
选项：
--list	列出所有系统服务
--level	修改服务启动时所在的各级别
--del	删除一个服务
--add	添加一个服务

例如：
# chkconfig --list	列出所有系统服务，查看服务在各级别是否启动
NetworkManager 	0:关闭	1:关闭	2:关闭	3:关闭	4:关闭	5:关闭	6:关闭
abrt-ccpp      	0:关闭	1:关闭	2:关闭	3:启用	4:关闭	5:启用	6:关闭
abrtd          	0:关闭	1:关闭	2:关闭	3:启用	4:关闭	5:启用	6:关闭

# chkconfig --list | grep httpd
httpd          	0:关闭	1:关闭	2:关闭	3:关闭	4:关闭	5:关闭	6:关闭

# chkconfig httpd on	将httpd服务设置为开机启动
# chkconfig httpd off	将httpd服务设置为开机不启动

# chkconfig httpd off --level 23  将httpd服务设置为在系统级别为23时不启动
# chkconfig httpd on --level 23	  将httpd服务设置为在系统级别为23时启动

# chkconfig  --del httpd 	删除httpd服务，只是chkconfig命令看不到了而已
# chkconfig --list |grep httpd
没有显示！

# chkconfig  --add httpd 	添加httpd服务
# chkconfig --list |grep httpd
httpd          	0:关闭	1:关闭	2:启用	3:启用	4:启用	5:启用	6:关闭


处理字符串命令补充：
cut 命令	切割文件内容
命令格式：
# cut [要处理的文件]  [选项1] [选项2]

选项：
-d 					指定分割符
-f					指定多少列

例如：
# cut /etc/passwd -d ":" -f 2		将/etc/passwd文件内容字符串以 ： 为分隔符划分为列，并且只显示第二列的内容
注意：这个命令有个特点，必须两个选项一起使用，否则没效果或会报错


tr 命令	删除或替换字符串(替换的可以是字母、数字、符号等)
命令格式：
# tr /etc/passwd 
-d					删除	
该命令只能在使用管道的同时才有作用，请看完管道的使用方法笔记后在来看该处

例如：
# cat 123.txt |tr ":" "."	将123.txt文件中的：替换为 . 后输出到屏幕




管道的作用和使用方法：
将一个命令的输出(结果)作为输入给另一个命令处理，一个人加工后在拿给另一个人加工

# stat 1 | tail -3		查询出文件 1 的元数据，并由管道将其交给tail -3命令处理后输出结果
	
# tail -5 /etc/passwd  |head -1
Access: 2016-08-19 11:27:09.635842188 +0800
Modify: 2016-08-23 13:37:26.000000000 +0800
Change: 2016-08-17 19:21:17.788656830 +0800

# cat /etc/passwd |wc -l		查看/etcpasswd文件，并由管道将输出的结果交给wc -l命令统计有多少行
41

wc 	统计有多少行，字符等
-l					lines,行数
-L					字符串最大长度(不包含结束符)
-c/-m				字符(linux系统中的字符串有一个结束符‘\0’)
-w					单词
# cat /etc/passwd |grep root |wc -l

管道使用实例：

# cat /etc/passwd | head -1 | cut -d ":" -f1		只打印出/etc/passwd第一行的以：为分隔符的第一个字段（如果想显示多个字段用，分隔开即可，如 -f1，2，3）
root

# cat 123.txt
a:b:c:d	
# cat 123.txt | head -1 | tr ":" ","		只打印出/etc/passwd文件的第一行，并将":"替换成","
a.b.c.d




重定向的含义：

重定向符号“>”，两个代表追加“>>”

/dev/stdin				标准输入设备(键盘)
/dev/stdout			标准输出设备
/dev/stderr			标准输出设备

标准输入:指你键盘的输入
标准输出:指结果里正确的输出,一般的设备是屏幕，使用>将标准输出重定向到其它地方
错误输出:指结果里错误的输出,一般的设备是屏幕，使用2>将错误的输出重定向到其它地方

管道就是将本来输出到屏幕的内容输出到其他地方

# ls > 123.txt				将标准输出重定向到某个文件(标准输出)
# ls abc 2> 123.txt				将错误的输出重定向到某个文件(标准出错)
# ls &> 123.txt				&结合了1和2的作用，不管是标准输出还是错误输出都重定向到某个文件
# ls abc &>> 123.txt				不管是标准输出还是错误输出都追加到某个文件中
# ls install.log.syslog fdsafasf 1> 123.txt 2> 2.txt	将错误输出重定向至2.txt，标准输出重定向到123.txt

# cat 1.txt > /dev/null			/dev/null类似一个黑洞设备，不管是错误还是标准输出都没有任何显示

# echo 123 > 1.txt				覆盖之前的内容
# echo 456 >> 1.txt				追加内容

# wc -l < 1.txt				将文件的内容重定向出来交给前面的命令处理
2	

# cat > 1.txt 
hello
hello					使用ctrl+d结束
# cat 1.txt 
hello
hello

# cat > 123.txt << EOF			EOF是end of file的缩写，就是一个标记
> 111
> 222
> EOF

# cat >> 123.txt << HAHA	相比于上一条，这是追加内容，而且标记不一定要用EOF，只要前后一致成对出现就可以
> 333
> 444
> HAHA



 文件ACL
1. 什么是ACL?
	前面的内容中，我们讲到传统的权限仅有三种身份(owner,group,others)搭配三种权限(r,w,x)，随着应用的发展，这些权限组合已不能适应现在复杂的文件系统权限控制要求。

例如，目录data的权限为：drwxr-x―，所有者与所属组均为root，在不改变所有者和所属组的前提下，要求用户yufei对该目录有完全访问权限(rwx)，但又不能让其他有用完全权限（rwx），这种情况就只能使用acl访问控制列表权限来控制了。

2. 查看系统是否支持ACL
# dumpe2fs /dev/sda1 |grep acl
dumpe2fs 1.41.12 (17-May-2010)+`-

Default mount options:    user_xattr acl
我们看到，默认的挂载选项就已经有了ACL了，如果你的系统挂载时候没有这个选项，你可以通过下面的命令进行加载：
# mount -o remount,acl /dev/sda1
你也可以把这个挂载选项加入到开机启动，也就是写入到/etc/fatab文件里面。

命令：
getfacl：查看文件/目录的ACL设定内容
setfacl：设置文件/目录的ACL内容

命令格式：
# setfacl  [选项]  要修改的权限  文件

命令选项：
-m：设置后续的acl参数
-x ：删除后续的acl参数
-b ：删除所有的ACL设定参数
-R ：递归设置acl参数
-d ：设置预设的acl参数（只对目录有效，在该目录新建的文件也会使用此ACL默认值）
-k ：删除预设的ACL参数

设置格式如下
[d[efault]:] u[ser]:uid [:perms]
[d[efault]:] g[roup]:gid [:perms]
[d[efault]:] m[ask][:] [:perms]

设置用户ACL权限
# setfacl -m u:user1:rwx install.log		--多个用户用逗号隔开

设置ACL的mask		（mask 掩码：表示文件本身拥有的最高权限）				
# setfacl -m m::r install.log

设置默认ACL权限
# setfacl -m d:user1:rw /test/
# setfacl -d u:user1:rw /test/

删除ACL权限
# setfacl -x u:user1 install.log
# setfacl -b install.log



环境变量

环境变量是在操作系统中一个具有特定名字的对象，它包含了一个或者多个应用程序所将使用到的信息。
当要求系统运行一个程序而没有告诉它程序所在的完整路径时，系统除了在当前目录下面寻找此程序外，还应到path中指定的路径去找。用户通过设置环境变量，来更好的运行进程
最好的例子就是设置的命令别名！！

env				--看环境变量
set				--除了环境变量，还能看自定义变量

# abc="hello world"
# env | grep abc
# set | grep abc	 		--set可以查出这个自定义变量
abc='hello world'

# echo $PATH
/usr/lib64/qt-3.3/bin:/usr/local/sbin:/usr/sbin:/sbin:/usr/local/bin:/usr/bin:/bin:/root/bin
# echo $USER
root
# echo $HOME
/root
# echo $RANDOM			--产生一个随机数，范围大概是0-32768

# echo $PS1			--这是终端前的命令提示符
[\u@\h \W]\$

用户的环境变量设定文件,在每个用户的家目录里都会有下面四个文件
.bash_logout	--用户退出后执行的	可以在这里加上清除.bash_history的命令，在用户退出时清掉之前的操作
.bash_history	--用户的历史命令存放的地方  用history命令可以查看，它不记录当前会话用过的命令，当你退出时，它才会记录你退出前所操作的命令
.bash_profile	--用户的环境变量设定的地方	用户登录时执行
.bashrc		--别名设定的文件		用户登录时执行

# history 		--查看历史命令
# history -c	--清除历史记录
# history -w	--将内存里的命令写入到.bash_history


系统默认在root用户家目录里的.bashrc里设定了以下几个别名
# vim /root/.bashrc
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'	--这三个命令都已经做了-i参数的别名，是系统为了安全性防止用户误操作设定的


系统全局环境变量文件
/etc/bashrc    /etc/profile     	--这两个文件是对所有用户都生效，全局性的
/etc/profile.d/		--这个目录下也是相关软件的环境变量

修改了变量文件，怎么才能让它生效？
1，退出重登录
2，#source  变量文件
3.  .  变量文件     		--点号加空格再接变量文件，使之生效

系统环境配置文件启动顺序：
/etc/profile-->/etc/profile.d/*-->~/.bash_profile-->~/.bashrc-->/etc/bashrc


例1:为了安全性考虑，我希望我对一个用户操作的命令不能被别人查到

#vim /home/abc/.bash_logout

history -c			--加这一句表示把当前会话的所有命令记录清空
rm -rf .bash_history		--把此文件删掉，也就表示不会有以前的命令记录

2，实现任何用户一登录，我就用一个文本来记录什么用户什么时间登录的
格式如: user1  2014-07-17 18:00:00
# touch /tmp/login
# chmod 666 /tmp/login
# vim /etc/profile
echo "$USER `date +'%F %T'`" >> /tmp/login

# source  /etc/profile
# . /etc/profile		--这两条是让你修改过的环境变量文件生效，rhel5需要做，现在rhel6可以不用做这一步

3,实现root用户密码的自动更改（一般来说，这种需求是用时间任务去做的）；这里我要求是用户一登录，密码就变了，也就是说下一次登录的密码不一样了。密码随意。(最好用虚拟机来测试或者使用一个普通用户来做测试)
	密码修改提示:    echo 123 | passwd --stdin root &> /dev/null


# vim /root/.bash_profile
在文件下方添加以下代码：
echo "`date +%Y%m%d`" | passwd --stdin root &> /dev/null

或者

echo "$RANDOM" | passwd --stdin root &> /dev/null


	--密码你可以改完后，把它用重定向的方法重定向到一个文件保存下来,或者发邮件通知


4，如果要想实现一个普通用户30秒不操作则自动退出

在用户的家目录里的.bash_profile里加上下面一句
TMOUT=30


