几个简单的命令：
用户登录信息命令

	whoami		--类似$USER
	who			--当前系统的登录信息
	w			--比who的信息更多
	users		--显示who的第一列
	uptime		--登录的时间和负载
	tty			--查看当前终端
	who am i	--查看当前终端的信息

	
	
进程管理命令：
ps命令		查看当前系统运行的进程信息

命令格式：
# ps [选项]

命令选项：
-a 	显示系统中与当前终端有关的进程信息
-e	显示系统中所有的进程信息（可用“-A”替代）
-f	显示进程的所有信息
-l	以长格式显示进程信息
-u  以用户为主的进程状态 
-x  通常与 a 这个参数一起使用，可列出较完整信息（显示详细信息）

示例：
# ps  	列出每一个与当前shell有关的进程的基本信息
PID TTY          TIME CMD
25005 pts/0    00:00:00 bash

其中各个字段的含义如下：
PID 	进程的标志号
TTY		该经常建立时所对应的终端，如果是？则表示不占用终端
TIME 	显示进程累计使用的CPU时间
CMD		执行进程的命令

# ps -ef		显示系统中所有进程的全面信息
root      25373  25005  0 04:29 pts/0    00:00:00 tar -t test.tar.gz
postfix   25852   1600  0 05:10 ?        00:00:00 pickup -l -t fifo -u
root      26766   1638  0 06:24 ?        00:00:00 sleep 60
root      26768  25005  0 06:24 pts/0    00:00:00 ps -ef

其中几个新项目的含义：
UID 	进程属主的用户ID
PPID	父进程的ID号
C		进程最近使用的CPU估算
STIME	进程开始时间，以“小时：分”的形式显示

# ps aux	显示所有终端上所有用户的有关进程的所有信息


kill命令		终止一个进程
命令格式：
# kill [选项] 进程PID		进程PID可使用ps命令查询到

我们常用的快捷键Ctrl+c只是用来结束前台进程的命令，如果是后台进程就需要用到kill命令了

kill命令的常用选项：
-l	列出所有kill命令的选项
-1 	终端断线
-2	中断（同ctrl+c）
-3	退出（同ctrl+\）
-15	终止
-9	强制终止（常用）
-18	继续进程
-19	暂停进程

示例：
如果我们运行了一个后台程序，但是我们突然之间又不想它运行了，或者说它占用了我们想要使用的其他应用的端口，那我们就可以使用kill命令将它的进程杀死
# ps -ef | grep vim 
# root 3268 2884 0 16:21 pts/1 00:00:00 vim install.log 
# root 3370 2822 0 16:21 pts/0 00:00:00 grep vim 
# kill 3268 
# kill 3268 
-bash: kill: (3268) - 没有那个进程


文件压缩和解压缩命令：
gzip命令		对文件进行压缩和解压缩

命令格式：
# gzip [选项] 源文件

例： 把test目录下的所有文件都压缩为.gz文件
# cd test
# gzip *

命令选项：
-d   解压缩
-r 	 递归查找指定目录并压缩其中的所有文件或解压缩
-t 	 测试，检查压缩后文件的完整性
-v	 对每个压缩文件和解压缩文件显示器文件名和压缩比
-num 用制定的数字1-9来调整压缩比，数字越大，压缩比越高

示例：
我们新建一个目录，在目录中创建10个普通文件
# mkdir /test
# cd /test
# touch {1..10}.txt
然后将test目录下的所有文件都压缩为.gz格式的文件
# gzip -r /test/*
在将其解压缩出来
# gzip -dr /test/*

注意：该命令只能用于普通文件的压缩，不能对目录和归档文件以及压缩文件压缩，而且压缩后不会保留原文件！


练习：
1.创建一个目录，在目录中创建多个普通文件
2.使用命令将目录中的所有普通文件进行压缩
3.使用命令将刚刚压缩后的文件进行解压


unzip命令	对zip格式文件进行解压缩，如 aaa.zip

命令格式：
# unzip  [选项] 原压缩文件

命令选项：
-x	指定该压缩文件中的某一个文件不解压缩
-v	如果在该选项后面没有指定压缩文件名，则显示有关unzip的诊断信息，如版本号、发行日期等等；如有接压缩文件名，则列出压缩文件的有关信息，但不解压缩。
-t	检查压缩文件的完整性
-d	把压缩文件解压后放到指定的目录
-n 	不覆盖已经存在的文件
-o	允许覆盖已经存在的文件
-j	废除压缩文件原有的目录结构，将所有的文件解压缩之后放到同一个目录下

示例：
将压缩文件test.zip在当前目录解压缩
# unzip test.zip
将压缩文件test.zip解压缩到指定的目录/opt
# unzip -d /opt/ test.zip

该命令只能解压缩不能压缩文件，而且只能解压缩以.zip格式的压缩文件

练习：
1.在虚拟机中的CentOS系统中打开浏览器，输入192.168.1.55这个IP，打开“作业”目录，将里面的test.zip文件下载到自己的系统内
2.使用unzip命令对下载下来的.zip文件进行解压缩，并放到指定的“/（根）”目录下的aaa目录中（如果/目录中没有aaa目录请手动创建一个）


tar命令			文件归档（打包），将多个文件或者多个目录打包到一起

命令格式：
# tar [] 目标文件 源文件

选项：
-c 		创建归档文件（打包）
-x 		释放归档文件（释放）
-t		列出归档文件内容（查看归档文件的内容）
-f		使用档名，请留意，在 f 之后要立即接档名！不要再加参数！例如使用『 tar -zcfv 归档文件名 源文件』就是错误的写法，要写成『 tar -zcvf 归档文件名 源文件 』
-z		在归档的时候调用gzip进行文件压缩
-j		在归档的时候调用bizp2进行文件压缩
-v		列出正在处理的文件（显示打包或解包的过程）
-C		（注意：这是一个大写的C）指定文件解包路径

例：
我们把/test这个目录进行打包

# tar -cvf test.tar test/		(注意，如果想要在打包后的文件放进指定的目录，必须先cd进该目录，然后在使用tar命令打包，tar命令默认是直接打包到当前所在目录下)
如，想要把/test目录打包到/root/aaa目录，步骤如下：
# cd /root/aaa  	先cd进aaa目录
# tar -cvf test.tar /test		只有这样才能将打包后的文件放进aaa目录中	

# tar -czvf	test.tar.gz /test	调用gzip压缩工具，将/test目录的所有内容归档后进行压缩

解压：

# tar -xf	test.tar  		将test.tar归档文件解包到当前目录
如果要想把解包后的内容放到指定目录，需要用到 -C（大写） 选项，
# tar -xf  test.tar -C /root/		注意：-C 选项是放在源文件后面，而不是前面的！

疑问？
如果在打包一个目录的时候使用到了-z选项，打包出来的格式为test.tar.gz的文件改如何解包呢？

提示：和打包时差不多，仅仅需要在选项中加入一个-z选项调用gzip工具进行解压便可！

# tar -czvf test.tar.gz  test	调用gzip工具进行打包后压缩
# tar -xzvf test.tar.gz	-C /	调用gzip工具进行解压


练习：
1.创建一个test目录，目录中创建多个子目录和普通文件
2.使用tar命令将test目录进行打包压缩，要求打包压缩后的文件格式为：test.tar.gz（这个需要调用zip才能压缩，提示 -z选项）
3.使用命令将刚刚压缩好的文件在解压出来，并放到指定目录中（目录指定为：/test/bbb）



文件查找命令：

find 命令	查找文件命令

命令格式

# find 查找路径 [选项] 查找内容

命令选项：
-name 	按名字查找	
	-i	忽略字母大小写

-teyp	按文件类型查找
	b:块设备文档
	d:目录
	c:字符设备文档
	P：管道文档
	l:符号链接文档
	f:普通文档

-uid	按uid查找

-gid	按gid查找

-user	按username查找

-group	按groupname查找

-perm	通过权限查找


-size	通过文件大小查找
	+n	查找出大于n的文件
	-n	查找出小于n的文件


例：
1，按名称查找
			find /etc/ -name grub.conf	--查找/etc目录下的grub.conf文件
			find /etc/ -name "*.conf"	--使用通配符，查找/etc/目录下的以.conf结尾的文件,这里一定加上引号，否则会出现问题
			find /etc/ -name ".*"	--查找etc下所有隐藏文件

			 find /test/  -iname Aaa	--忽略大小写加上-i
			/test/aaa
			/test/Aaa
			/test/AAa

	通配符(不是正则表达式):
	?		--匹配单个任意字符
	*		--0个或多个任意字符
	[a-z]	--匹配单个字母
	[0-9]	--匹配单个数字

	--定义查找的目录层次
	# find /test/ -maxdepth 1 -name  aaa	
	/test/aaa
	# find /test/ -maxdepth 2 -name  aaa
	/test/aaa
	/test/a/aaa


	2，按类型查找

			find /etc  -type l |grep grub.conf
			find /etc  -type l -name grub.conf	--与-name参数一起写
			
			 find /  -type f			--普通文件
			 find /  -type b			--块文件
			 find /  -type s			--socket文件
			 find /  -type c			--字符文件
			 find /  -type p			--管道文件
			 find /  -type d			--目录
			 find /  -type l			--链接文件


	3，按用户名，组名，uid,gid查找
			find / -user a
			find / -group a
			find / -uid 533
			find / -gid 533
			find / -nouser  	--查出系统的无头文件，就是指没有属主的文件  
			find / -nogroup		--查出系统的没有属组的文件
					没有属主和属组的文件，系统管理一般是要去注意的



	4，按权限查找
			find / -perm  777   --查出所有权限为777的文件，一般也是管理员要注意的

练习：

	# ll
	total 0
	-rwxr-xrwx. 1 root root 0 Jul 23 11:42 1
	---------x. 1 root root 0 Jul 23 11:42 10
	-rwx--xr--. 1 root root 0 Jul 23 11:42 2
	-rw-rw--wx. 1 root root 0 Jul 23 11:42 3
	-r-xrwx---. 1 root root 0 Jul 23 11:42 4
	-r---w--w-. 1 root root 0 Jul 23 11:42 5
	--wx-wx-wx. 1 root root 0 Jul 23 11:42 6
	--w-r-x--x. 1 root root 0 Jul 23 11:42 7
	---xrw-r-x. 1 root root 0 Jul 23 11:42 8
	----rwxr--. 1 root root 0 Jul 23 11:42 9

	# find . -perm +422	--只有7和10两个文件不符合。＋号的意思表示把权限写成9位，然后位与位对比，只要有一位重合，则找出来


	# find . -perm -422	--只查出3和5两个文件。－号的意思表示位与位对比，要全部包含重合，则找出来


	例:假设/etc/目录下所有文件owner和group为root.root,我要查找一个普通用户user1在/etc/下能读能写的文件.

	find /etc/ -perm   -006



	5，按大小查找

			find / -size +500M	--单位有k,m,g等
			find / -size +1G
			find /etc -size +50k
			find /etc -size +50b	（b在这里不是代表byte，是代表block，并且还不是系统的4096大小的block，这里的大小为512byte)
			find /  -size -1M
			find /  -size +3c   (c在这里代表byte)vimn


	find /   -size +80M -size -100M 


	6，按时间查找

	# stat 1 |tail -3
	Access: 2014-07-23 11:56:42.297572398 +0800	--atime	阅读过，用cat,tail,head,more,less命令等或者vi访问过，但没有修改；执行过也会改变

	Modify: 2014-07-23 11:56:44.836572907 +0800	--mtime 修改过内容，用vi修改过或者echo一个值重定向
	Change: 2014-07-23 11:56:44.856885177 +0800	--ctime 改变过内容，属主，属组，权限，创建软链接，硬链接等


		-mtime  n	--代表n天前的24小时内	
			+n	--代表n天前（不包含n天本身的24小时）
			-n	--代表n天内


		1	2	3	4	5	6	7
				|-- 2 --|
		<-------    -2  | 	| +2	--------------->
		



		find / -mtime 0		--0代表目前当天的24小时
		find / -mtime  +1	--修改时间48小时之前
		find . -mtime -1	--修改时间往推24小时到现在甚至到将来
		find / -mtime  1	--往前推24小时到推48小时之内


		-mmin
		-amin		--与mtime,atime,ctime的单位不同，这是以分钟为单位
		-cmin	


	# find / -mmin +30 -mmin -150	--查看30分钟前到150分钟前之内的两个小时内有哪些文件被修改过内容


	现在的时间为2014年7月23号14：35分，我现在想查出7月20号那一天哪些文件被修改过内容怎么做?

	find / -mtime  3  --这样做代表的是7月19号14：35分到7月20号14：35分



vim编辑器的使用：


使用方法：

# vim 文件路径

如： # vim /test/123.txt
# vim +行号 文件名	--进入文件后光标直接处在指定的行上
# vim +/词  文件名	--进入文件后光标直接处在第一个出现指定词的第一行上
# vim 文件1 文件2 	--同时编辑多个文件，：e 文件2 切换至第二个文件，以此类推

分为三种模式：
1、普通模式
使用vim命令打开一个文件后，默认就处于普通模式。

普通模式快捷移动光标的按键：
Page Down(ctrl+f)	向下翻一页
Page Up(ctrl+b)		向上翻一页
ctrl+d			向下翻半页
ctrl+u			向上翻半页
H		光标移动到当前页的第一行的第一个字符处
M		光标移动到当前页的中间那行的第一个字符处
L		光标移动到当前页最下方那行的第一个字符处
G		移动到文件的最后一行
nG		n为数字，移动到这个文件的第n行
gg		将光标移动到该文件的第一行行首
n（Enter）	n为数字，光标向下移动n
0		数字0，不是字母o，将光标移动到当前行的行首，不管它是不是为空白符
+		将光标移动到下一行的行首
l		光标向右移动一个字符
L		将光标移动到当前页的最后一行的行首，2L表示将光标移动到当前页的倒数第二行的行首
h		光标向左移动一个字符
j		将光标移动到下一行
k		将光标移动到上一行

$		将光标移动到光标所在行的最后一个字符上，可以在$前加入一个数字，如8$，表示将光标移动到8-1行的最后一个字符处（包含光标所在行往下数8行的最后一个字符）

字符修改的按键：
x		删除光标所在的字符，4x表示删除光标到往右数的4个字符
X		和小x相反
dd		删除光标所在行
D		从光标位置开始删除到该行行尾
d0		从光标位置开始删除至行首
dH		删除光标所在行开始至本页顶部的所有行
dL		删除光标所在行至该页的最后一行
u		复原，取消刚才的删除或插入命令
J		（大写）将多行合并为一行，3J表示将光标所在行（包括改行）往下3行合并成一行
yy		复制光标所在行，3yy表示从光标所在行向下复制3行，包括该行
p		在光标所在位置的下一行粘贴复制的内容


2、命令行模式（末行模式）
在普通模式中输入 ： / ?便可进入命令行模式
字符串替换：

：w newfilename		将修改后的文件内容另存为到一个新的文件当中（newfilename请修改为自己想要的文件名）
：r 其他文件		将其他文件的内容追加都正在编辑的文件尾部
：set nu		在每行文件内容前加入一个行号
：g/root/p		打印出所有包含root字符串的行
：g/root/s//txt/	将文件中首次出现的root字符串替换为txt字符串 	
：g/root/s//txt/g 	将文件中root这个字符串全部替换为txt字符串，不管一行中出现多少次都替换
：g/^/s//test/g		在文件的每一行的开头插入一个test字符串（test请更好成自己想要的内容，“^”表示开头，行首的意思）
：w			保存
：q			退出
：wq		保存退出
：wq！		强制保存退出，也可使用ZZ执行不加强制的保存退出

查找字符：
/word		向下查找一个名为word的字符串，word请更换成自己需要查找的字符串内容
？word		向上查找一个名为word的字符串
n		英文字母n，表示重复前一次的查找步骤
N		也是重复上一次的查找步骤，不过是反向的，如：上一次我们使用/word，按下大写的N后则是以？word查找

3、编辑模式

进入编辑模式：
i	从光标所在字符开始插入
I	从光标所在行的行首开始插入
a	从光标所在字符的后一个字符处开始插入
A	从光标所在行的行尾开始插入
o	从光标所在行的下一行新建一行开始插入
O	从光标所在行的上一行新建一行开始插入


练习题：
1.在/tmp目录下新建一个名为vitest目录
2.进入vitest目录中
3.经/etc/man.config拷贝到该目录中
4.使用vim打开man.config这个文件
5.在vim中设置行号
6.移动到58行，向右移动40个字符，请问你看到的内容是什么？
7.移动到第一行，并且向下查找一下bzip2这个字符串，请问它在第几行？
8.将文件中所有的man改为MAN，请问一共有几个呢？
9.修改完成后，请将其复原
10.复制65到73行的内容，并粘贴到文件尾部
11.将文件中以#好开头的行把开头的#号删除
12.在第一行新增一行，将自己的名字写进去
13.保存后退出


















